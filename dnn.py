# -*- coding: utf-8 -*-
"""DNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gnrs3-xU9QiUDgY5SCxMTY7XRLrHrYNV

1) Importing libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import pandas as pd

"""2)Reading Data"""

data = pd.read_csv("/content/Airline_Delay_Cause.csv")

data

"""3) Data analysis"""

data.info()

data = data.drop(['carrier' , 'carrier_name' , 'airport' , 'airport_name'] ,axis = 1)
data

"""4) Data Clearing"""

data.isna().sum()

data.dropna(inplace = True)

data.info()

data['weather_delay'].min() , data['weather_delay'].max()

data['WDCase'] = data['weather_delay'].apply(lambda x:1 if x>100  else 0)
data

data['WDCase'].value_counts()

x = data.drop(['WDCase'] , axis = 1)
y = data['WDCase']

x

y

"""5)Split The Data into train and test data"""

from sklearn.model_selection import train_test_split

x_train , x_test , y_train , y_test = train_test_split(x,y , test_size = 0.25 , random_state= 44 , shuffle=True)

print("x_train shape is : " , x_train.shape)
print("test shape is : " , x_test.shape)
print("y_train shape is : " , y_train.shape)
print("y_test shape is : " , y_test.shape)

"""6) Importing TensorFlow And Keras"""

import tensorflow as tf
import keras

"""7) Building The Neural Network"""

KerasModel = keras.models.Sequential([
    keras.layers.Input(shape =(17)),
    keras.layers.Dense(8 , activation = 'tanh'),
    keras.layers.Dense(128 , activation = 'tanh'),
    keras.layers.Dense(64 , activation = 'tanh'),
    keras.layers.Dense(1 , activation = 'sigmoid')
])

MyOptimizer =tf.keras.optimizers.experimental.AdamW(
    learning_rate = 0.001,
    weight_decay = 0.004,
    beta_1 = 0.9,
    beta_2 = 0.999,
    epsilon = 1e-07,
    amsgrad = False,
    clipnorm = None,
    clipvalue = None,
    global_clipnorm = None,
    use_ema = False,
    ema_momentum = 0.99,
    ema_overwrite_frequency = None,
    jit_compile = True,
    name = 'AdamW')

KerasModel.compile(optimizer=MyOptimizer,loss='binary_crossentropy',metrics=['accuracy'])

history = KerasModel.fit(x_train , y_train ,
                         validation_data = (x_test , y_test),
                         epochs = 100,
                         batch_size = 10000,
                         verbose = 1 ,
                         callbacks = [tf.keras.callbacks.EarlyStopping(
                             patience = 10,
                             monitor = 'val_accuracy',
                             restore_best_weights = True)])

print(KerasModel.summary())

KerasModel.save('KerasModel.model1')

NewKerasModel = keras.models.load_model('KerasModel.model1')

x_test

y_pred = KerasModel.predict(x_test)

print('Prediction Shape is {}'.format(y_pred.shape))

print('Prediction Items is {}'.format(y_pred[0:5]))

y_test[0:5]

ModelLoss , ModelAccuracy = NewKerasModel.evaluate(x_test , y_test)
print('Model Loss is {} :'.format(ModelLoss))
print('Model Accuracy is {}:'.format(ModelAccuracy))

plt.plot(history.history["accuracy"])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train' , 'validation'] , loc = 'upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train ', 'validation'] , loc = 'upper right')
plt.show()

y_pred = [np.round(i[0]) for i in y_pred]
y_pred

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test , y_pred)
print(' confusion_matrix is :\n' , cm)

import seaborn as sns
sns.heatmap(cm , center = True , cmap = 'Blues_r')
plt.show()

from sklearn.metrics import classification_report
ClassificationReport = classification_report(y_test , y_pred)
print('Classification Report is : \n' , ClassificationReport)

data['weather_delay'].min() , data['weather_delay'].max()

data.shape

def value(x):
  if x <= 30 :
    return 0
  elif x <= 100 :
    return 1
  elif x <= 200 :
    return 2
  else :
    return 3
data['WDcase'] = data['weather_delay'].apply(lambda x : value(x))

data['WDcase'].value_counts()

data['WDcase'].value_counts()

x = data.drop(['WDCase','WDcase'] , axis = 1)
y = data['WDcase']

x

"""**Building a new neural network to predict more than one **"""

from sklearn.model_selection import train_test_split
x_train , x_test , y_train , y_test = train_test_split(x,y , test_size = 0.25 , random_state = 44 , shuffle = True)

print('x_train shape is : ' , x_train.shape)
print('x_test shape is : ' , x_test.shape)
print('y_train shape is : ' , y_train.shape)
print('y_test shape is : ' , y_test.shape)

import tensorflow as tf
import keras

kerasmodel = keras.models.Sequential([
    keras.layers.Dense(8 , activation = 'tanh'),
    keras.layers.Dense(64 , activation = 'tanh'),
    keras.layers.Dense(128 , activation = 'tanh'),
    keras.layers.Dense(4 , activation = 'softmax')
])

kerasmodel.compile(optimizer = 'adam' , loss = 'categorical_crossentropy' , metrics = ['accuarcy'])

y_train

y_cat = tf.keras.utils.to_categorical(y)

from sklearn.model_selection import train_test_split
x_train , x_test , y_train , y_test = train_test_split(x,y_cat , test_size = 0.25 , random_state = 44 , shuffle = True)

print('x_train shape is : ' , x_train.shape)
print('x_test shape is : ' , x_test.shape)
print('y_train shape is : ' , y_train.shape)
print('y_test shape is : ' , y_test.shape)

x_train

y_train

import tensorflow as tf
import keras

KerasModels = keras.models.Sequential([
    keras.layers.Dense(8 , activation = 'tanh'),
    keras.layers.Dense(64 , activation = 'tanh'),
    keras.layers.Dense(128 , activation = 'tanh'),
    keras.layers.Dense(4 , activation = 'softmax')
])

KerasModels.compile(optimizer ='adam',loss='categorical_crossentropy', metrics = ['accuracy'])

Model = KerasModels.fit(x_train,
                         y_train,
                         validation_data=(x_test,y_test),
                         epochs=100,
                         batch_size=10000,
                         verbose=1,
                         callbacks=[tf.keras.callbacks.EarlyStopping(
                                            patience=5,
                                            monitor='val_accuracy',#"val_loss",
                                            restore_best_weights=True)])

print(KerasModels.summary())

KerasModels.save('KerasModels.model2')

NewKerasModels = keras.models.load_model('KerasModels.model2')

y_pred = NewKerasMdels.predict(x_test)

print('Predication shape is : ' , y_pred.shape )
print('Predication items is : ' , y_pred[:5])

ModelLoss , ModelAccuracy = NewKerasModels.evaluate(x_test , y_test)

print('Model Loss is {}'.format(ModelLoss))
print('Model Accuracy is {}'.format(ModelAccuracy) )



y_test

y_pred

y_pred_new = [np.argmax(i) for i in y_pred]
y_test_new = [np.argmax(i) for i in y_test]
print(y_pred_new)
print(y_test_new)

from sklearn.metrics import confusion_matrix
import seaborn as sns

cm = confusion_matrix(y_test_new , y_pred_new)
print('confusion matris is :\n' , cm)

sns.heatmap(cm , center = True , cmap = 'Blues_r' , annot= True )

from sklearn.metrics import classification_report

ClassificationReport = classification_report(y_test_new , y_pred_new)
print("Classification Report is : " , ClassificationReport)